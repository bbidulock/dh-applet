#!/usr/bin/perl

use Gtk2;
use Gtk2::Notify;
use Net::DBus;
use Net::DBus::GLib;
use Net::IPAddress;

Gtk2->init;
Gtk2::Notify->init("dhcpcd-applet");

use constant {
	ImpressServers		=>['impress-servers',	'ARRAY',	'ip'	],
	Flags			=>['flags',		'',		'flags'	],
	NISDomain		=>['nis-domain',	'',		'string'],
	FontServers		=>['font-servers',	'ARRAY',	'ip'	],
	SubnetMask		=>['subnet-mask',	'',		'ip'	],
	SubnetCIDR		=>['subnet-cidr',	'',		'numb'	],
	Type			=>['type',		'',		'enum'	],
	NetBIOSDDServer		=>['netbios-dd-server',	'',		'ip'	],
	Routers			=>['routers',		'',		'ip'	],
	NetworkNumber		=>['network-number',	'',		'ip'	],
	NDSServers		=>['nds-servers',	'ARRAY',	'ip'	],
};
# -----------------------------------------------
package Dhcpcd::Block;
use strict;
sub new {
}
sub GetConfig {
}
sub SetConfig {
}

# -----------------------------------------------
package Dhcpcd::Network;
use strict;
sub new {
	my ($type,$daemon,$intf,$id) = @_;
	my $self = bless {}, $type;
	$self->{daemon} = $daemon;
	$self->{intf} = $intf;
	$self->{id} = $id;
	return $self;
}
sub Add {
	my ($type,$daemon,$intf) = @_;
	return $type->new($daemon,$intf,$daemon->AddNetwork($intf));
}
sub Remove {
	my $self = shift;
	return $self->{daemon}->RemoveNetwork($self->{intf},$self->{id},@_);
}
sub Enable {
	my $self = shift;
	return $self->{daemon}->EnableNetwork($self->{intf},$self->{id},@_);
}
sub Disable {
	my $self = shift;
	return $self->{daemon}->DisableNetwork($self->{intf},$self->{id},@_);
}
sub Select {
	my $self = shift;
	return $self->{daemon}->SelectNetwork($self->{intf},$self->{id},@_);
}
sub Get {
	my $self = shift;
	return $self->{daemon}->GetNetwork($self->{intf},$self->{id},@_);
}
sub Set {
	my $self = shift;
	return $self->{daemon}->SetNetwork($self->{intf},$self->{id},@_);
}


# -----------------------------------------------
package Dhcpcd::Interface;
use strict;
sub new {
	my ($type,$daemon,$name) = @_;
	my $self = bless {}, $type;
	$self->{daemon} = $daemon;
	$self->{name} = $name;
	return $self;
}
sub is_removed {
	my $self = shift;
	return $self->{removed};
}
sub set_removed {
	my $self = shift;
	$self->{removed} = 1;
}
sub set_present {
	my $self = shift;
	delete $self->{removed};
}
sub set_config {
	my ($self,$hash) = @_;
# maybe check for changes
	$self->{hash} = $hash;
	$self->set_present;
	print STDERR "New configuration for $self->{name}:\n";
	foreach my $k (sort keys %$hash) {
		my $v = $hash->{$k};
		print STDERR "  $k: ";
		if (ref($v) eq 'ARRAY') {
			print STDERR join(' ',map {&Dhcpcd::Daemon::format($k,$_)} @$v),"\n";
		} else {
			print STDERR &Dhcpcd::Daemon::format($k,$v),"\n";
		}
	}
}
sub Rebind {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
}
sub Release {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
} 
sub Scan {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
}
sub ListNetworks {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
}
sub SaveConfig {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
}
sub Disconnect {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
}
sub Reassociate {
	my $self = shift;
	return $self->{daemon}->Rebind($self->{name},@_);
}


# -----------------------------------------------
package Dhcpcd::Daemon;
use base qw(Net::DBus::RemoteObject);
use strict;

sub format {
	my ($name,$val) = @_;
	if ($name=~/Server[s]?$|Address$|SubnetMask|Routers|NetworkNumber|XDisplayManager|MobileIPHomeAgent|DHCPServerIdentifier/) {
		return Net::IPAddress::num2ip(unpack('N',pack('L',$val)));
	}
	return $val;
}
sub new {
	my $type = shift;
	my $bus = Net::DBus::GLib->system;
	my $service = $bus->get_service("name.marples.roy.dhcpcd");
	my $self = $service->get_object("/name/marples/roy/dhcpcd");
	bless $self,$type;
	$self->{my}{bus} = $bus;
	$self->{my}{version} = $self->GetVersion;
	$self->{my}{dhcpver} = $self->GetDhcpcdVersion;
	$self->{my}{interfaces} = $self->ListInterfaces;
	$self->{my}{status} = $self->GetStatus;
#	$self->{my}{blocks} = $self->GetConfigBlocks;
	$self->{my}{sigids} = {
		Event=>		$self->connect_to_signal("Event",	 sub{ $self->Event(@_);		}),
		StatusChanged=>	$self->connect_to_signal("StatusChanged",sub{ $self->StatusChanged(@_);	}),
		ScanResults=>	$self->connect_to_signal("ScanResults",	 sub{ $self->ScanResults(@_);	}),
	};
	print STDERR "New: ",$self->get_object_path,"\n";
	print STDERR "Version: ",$self->GetVersion,"\n";
	print STDERR "Dhcpcd Version: ",$self->GetDhcpcdVersion,"\n";
	print STDERR "Status: ",$self->GetStatus,"\n";
	print STDERR "Interfaces: ",join(', ',@{$self->ListInterfaces}),"\n";
#	print STDERR "Blocks: ",join(', ',@{$self->GetConfigBlocks}),"\n";
	print STDERR "Interfaces: ",$self->GetInterfaces,"\n";
	$self->reread_config;
	return $self;
}
sub old {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{my}{sigids}}) {
		$self->disconnect_from_signal($name,$sigid);
	}
}
sub reread_config {
	my $self = shift;
	foreach my $intf (values %{$self->{my}{intfs}}) {
		$intf->set_removed;
	}
	my $interfaces = $self->GetInterfaces;
	while (my ($i,$h) = each %$interfaces) {
		my $intf = $self->{my}{intfs}{$i};
		unless ($intf) {
			$intf = Dhcpcd::Interface->new($self,$i);
			$self->{my}{intfs}{$i} = $intf;
		}
		$intf->set_config($h);
	}
	foreach my $intf (values %{$self->{my}{intfs}}) {
		if ($intf->is_removed) {
			print STDERR "Inteface $intf->{name} was removed!\n";
		}
	}
}
sub Event {
	my ($self,$configuration) = @_;
	print STDERR "Event:\n";
	foreach my $k (sort keys %$configuration) {
		my $v = $configuration->{$k};
		print STDERR "  $k:";
		if (ref($v) eq 'ARRAY') {
			print STDERR join(' ',map {&Dhcpcd::Daemon::format($k,$_)} @$v),"\n";
		} else {
			print STDERR &Dhcpcd::Daemon::format($k,$v),"\n";
		}
	}
	$self->reread_config;
}
sub StatusChanged {
	my ($self,$status) = @_;
	print STDERR "Status: ",$self->{my}{status}," -> ",$status,"\n";
	$self->{my}{status} = $status;
	$self->reread_config;
}
sub ScanResults {
	my ($self,$interface) = @_;
	print STDERR "Scan results for $interface:\n";
	my $results = $self->ScanResults($interface);
	foreach my $result (@$results) {
		foreach my $k (sort keys %$result) {
			my $v = $result->{$k};
			print STDERR "  $k:";
			if (ref($v) eq 'ARRAY') {
				print STDERR join(' ',map {&Dhcpcd::Daemon::format($k,$_)} @$v),"\n";
			} else {
				print STDERR &Dhcpcd::Daemon::format($k,$v),"\n";
			}
		}
	}
	$self->reread_config;
}

# -----------------------------------------------
package Dhcpcd::Applet;
use strict;

our $applet;

sub init {
	my $type = shift;
	return if $applet;
	$applet = bless {},$type;
#$applet->{icon} = new Dhcpcd::Icon;
	$applet->{daemon} = new Dhcpcd::Daemon;
	return;
}

# -----------------------------------------------
package main;
use strict;

Dhcpcd::Applet->init;

Gtk2->main;
